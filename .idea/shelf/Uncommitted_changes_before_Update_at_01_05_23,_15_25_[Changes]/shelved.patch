Index: app/dashboard.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>print(2324)\nprint(1234)\nprint(\"Test\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/dashboard.py b/app/dashboard.py
--- a/app/dashboard.py	(revision c464145bbe52f577e95dc25ebed0b768d7fde20e)
+++ b/app/dashboard.py	(date 1682877301483)
@@ -1,3 +1,82 @@
-print(2324)
-print(1234)
-print("Test")
\ No newline at end of file
+import dash
+from dash import dcc
+from dash import html
+import psycopg2
+import pandas as pd
+import plotly.express as px
+
+import os
+from time import time
+from psycopg2 import connect, sql
+from dotenv import load_dotenv
+
+# load environments from .env file
+load_dotenv()
+
+# postgress connection
+conn = connect(
+    database = "Dashboard",
+    host = "localhost",
+    user = os.getenv('POSTGRES_USER'),
+    password = os.getenv('POSTGRES_PASSWORD'),
+    port="5432"
+)
+# Получение списка таблиц из базы данных
+cursor = conn.cursor()
+cursor.execute("SELECT table_name FROM information_schema.tables WHERE table_schema='public'")
+tables = [table[0] for table in cursor.fetchall()]
+
+# Создание экземпляра Dash
+app = dash.Dash(__name__)
+
+# Создание layout для Dash
+app.layout = html.Div([
+    html.H1("Dashboard"),
+    dcc.Dropdown(
+        id='table-dropdown',
+        options=[{'label': table, 'value': table} for table in tables],
+        value=tables[0]
+    ),
+    dcc.Dropdown(
+        id='column-dropdown',
+        style={'display': 'none'}
+    ),
+    dcc.Graph(
+        id='graph'
+    )
+])
+
+# Callback для обновления списка столбцов при выборе таблицы
+@app.callback(
+    dash.dependencies.Output('column-dropdown', 'options'),
+    [dash.dependencies.Input('table-dropdown', 'value')])
+def update_columns(table):
+    cursor.execute(f"SELECT column_name FROM information_schema.columns WHERE table_name='{table}'")
+    columns = [column[0] for column in cursor.fetchall()]
+    return [{'label': column, 'value': column} for column in columns]
+
+# Callback для отображения выпадающего списка столбцов после выбора таблицы
+@app.callback(
+    dash.dependencies.Output('column-dropdown', 'style'),
+    [dash.dependencies.Input('table-dropdown', 'value')])
+def display_columns_dropdown(value):
+    if value:
+        return {'display': 'block'}
+    else:
+        return {'display': 'none'}
+
+# Callback для обновления графика при выборе таблицы и столбца
+@app.callback(
+    dash.dependencies.Output('graph', 'figure'),
+    [dash.dependencies.Input('table-dropdown', 'value'),
+     dash.dependencies.Input('column-dropdown', 'value')])
+def update_graph(table, column):
+    if column is None:
+        return {}
+    df = pd.read_sql(f"SELECT {column} FROM {table}", conn)
+    fig = px.histogram(df, x=column)
+    return fig
+
+# Запуск сервера Dash
+if __name__ == '__main__':
+    app.run_server(debug=True)
\ No newline at end of file
